{"ast":null,"code":"var _jsxFileName = \"/Users/mj/repo/siliconrhino/pages/e/[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport BaseEvent from '../../components/event/Event';\nconst EventWrapper = styled.div`\n`;\n\nconst EventPage = ({\n  id,\n  time,\n  title,\n  creator,\n  guests,\n  drinkType,\n  location,\n  comments\n}) => {\n  return __jsx(EventWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, __jsx(BaseEvent, {\n    id: id,\n    time: time,\n    title: title,\n    creator: creator,\n    guests: guests,\n    drinkType: drinkType,\n    location: location,\n    comments: comments,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }));\n};\n\nEventPage.getInitialProps = async context => {\n  const {\n    id\n  } = context.query;\n  console.log('getting stuff');\n  const res = await axios.get(`https://mock-api.drinks.test.siliconrhino.io/events/${id}`);\n  const event = res.data;\n  console.log(`Fetched data: `, res);\n  return event;\n};\n\nexport default EventPage;\n/**\n * import axios from 'axios';\nimport styled from 'styled-components';\nimport BaseEvent from '../../components/event/Event'\nimport { NextPageContext } from 'next';\nimport { Event } from './event.types'\nimport React from 'react';\n\nconst EventWrapper = styled.div`\n`\n\nclass EventPage extends React.Component<Event> {\n  static getInitialProps = async ({ query }: NextPageContext) => {\n    try {\n      const { id } = query\n      const item = await axios.get<Event>(`https://mock-api.drinks.test.siliconrhino.io/events/${id}`);\n      console.log('item: ', item)\n      return item.data\n    } catch (err) {\n      return { errors: err.message }\n    }\n  }\n\n  render () {\n    const {id, time, title, creator, guests, drinkType, location, comments } = this.props;\n    return (\n      <EventWrapper>\n        <BaseEvent\n          id={id}\n          time={time}\n          title={title}\n          creator={creator}\n          guests={guests}\n          drinkType={drinkType}\n          location={location}\n          comments={comments}\n        />\n      </EventWrapper>\n    )\n  }\n}\n\nexport default EventPage;\n\n */","map":{"version":3,"sources":["/Users/mj/repo/siliconrhino/pages/e/[id].tsx"],"names":["axios","styled","BaseEvent","EventWrapper","div","EventPage","id","time","title","creator","guests","drinkType","location","comments","getInitialProps","context","query","console","log","res","get","event","data"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AAIA,MAAMC,YAAY,GAAGF,MAAM,CAACG,GAAI;CAAhC;;AAGA,MAAMC,SAA0B,GAAG,CAAC;AAACC,EAAAA,EAAD;AAAKC,EAAAA,IAAL;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA,OAAlB;AAA2BC,EAAAA,MAA3B;AAAmCC,EAAAA,SAAnC;AAA8CC,EAAAA,QAA9C;AAAwDC,EAAAA;AAAxD,CAAD,KAAwE;AAEzG,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AACE,IAAA,EAAE,EAAEP,EADN;AAEE,IAAA,IAAI,EAAEC,IAFR;AAGE,IAAA,KAAK,EAAEC,KAHT;AAIE,IAAA,OAAO,EAAEC,OAJX;AAKE,IAAA,MAAM,EAAEC,MALV;AAME,IAAA,SAAS,EAAEC,SANb;AAOE,IAAA,QAAQ,EAAEC,QAPZ;AAQE,IAAA,QAAQ,EAAEC,QARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAcD,CAhBD;;AAkBAR,SAAS,CAACS,eAAV,GAA4B,MAAOC,OAAP,IAAmB;AAC7C,QAAM;AAAET,IAAAA;AAAF,MAASS,OAAO,CAACC,KAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,QAAMC,GAAG,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAW,uDAAsDd,EAAG,EAApE,CAAlB;AACA,QAAMe,KAAY,GAAGF,GAAG,CAACG,IAAzB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAa,gBAAb,EAA8BC,GAA9B;AAEA,SAAOE,KAAP;AACD,CARD;;AAUA,eAAehB,SAAf;AAGA","sourcesContent":["import axios from 'axios';\nimport styled from 'styled-components';\nimport BaseEvent from '../../components/event/Event'\nimport { NextPage } from 'next';\nimport { Event } from './event.types'\n\nconst EventWrapper = styled.div`\n`\n\nconst EventPage: NextPage<Event> = ({id, time, title, creator, guests, drinkType, location, comments }) => {\n\n  return (\n    <EventWrapper>\n      <BaseEvent\n        id={id}\n        time={time}\n        title={title}\n        creator={creator}\n        guests={guests}\n        drinkType={drinkType}\n        location={location}\n        comments={comments}\n      />\n    </EventWrapper>\n  )\n}\n\nEventPage.getInitialProps = async (context) => {\n  const { id } = context.query;\n  console.log('getting stuff')\n  const res = await axios.get(`https://mock-api.drinks.test.siliconrhino.io/events/${id}`);\n  const event: Event = res.data\n  console.log(`Fetched data: `, res);\n\n  return event;\n};\n\nexport default EventPage;\n\n\n/**\n * import axios from 'axios';\nimport styled from 'styled-components';\nimport BaseEvent from '../../components/event/Event'\nimport { NextPageContext } from 'next';\nimport { Event } from './event.types'\nimport React from 'react';\n\nconst EventWrapper = styled.div`\n`\n\nclass EventPage extends React.Component<Event> {\n  static getInitialProps = async ({ query }: NextPageContext) => {\n    try {\n      const { id } = query\n      const item = await axios.get<Event>(`https://mock-api.drinks.test.siliconrhino.io/events/${id}`);\n      console.log('item: ', item)\n      return item.data\n    } catch (err) {\n      return { errors: err.message }\n    }\n  }\n\n  render () {\n    const {id, time, title, creator, guests, drinkType, location, comments } = this.props;\n    return (\n      <EventWrapper>\n        <BaseEvent\n          id={id}\n          time={time}\n          title={title}\n          creator={creator}\n          guests={guests}\n          drinkType={drinkType}\n          location={location}\n          comments={comments}\n        />\n      </EventWrapper>\n    )\n  }\n}\n\nexport default EventPage;\n\n */"]},"metadata":{},"sourceType":"module"}
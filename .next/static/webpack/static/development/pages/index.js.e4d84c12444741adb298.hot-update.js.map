{"version":3,"file":"static/webpack/static/development/pages/index.js.e4d84c12444741adb298.hot-update.js","sources":["webpack:///./components/search/Search.tsx"],"sourcesContent":["import styled from 'styled-components'\nimport { useState, useEffect } from 'react'\nimport {DebounceInput} from 'react-debounce-input'\nimport axios from 'axios'\nimport { Event } from '../../pages/e/event.types'\nimport EventThumbnail from '../event/EventThumbnail'\nconst SearchWrapper = styled.div`\n`\n\nconst SearchParamButton = styled.div<{isSelected: boolean}>`\n  display: grid;\n  justify-content: center;\n  place-items: center;\n  font-weight: bold;\n  border: 1px solid black;\n  box-shadow: 0 0 0 0 black;\n  background: ${(props) => props.isSelected ? 'blue' : 'none'};\n`\n\nconst SearchInput = styled(DebounceInput)`\n  width: 50%;\n  border: 1px solid black;\n`\n\nconst PageNumberButtonWrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n`\n\n\n\nconst Search = () => {\n  const [pageNo, selectPageNo] = useState(1)\n  const [pageSize, setPageSize] = useState(2)\n  const [searchQ, setSearchQ] = useState('')\n  const [allEvents, setEvents] = useState<Event[]>([])\n  const [isLoading, setLoading] = useState(false)\n  const [isError, setError] = useState(false)\n  const [eventsNo, setEventsNo] = useState(0)\n  useEffect(() => {\n    getEvents()\n  }, [])\n  useEffect(() =>\n  {\n    getEvents()\n  }, [pageSize, pageNo, searchQ])\n\n  const getEvents = async () => {\n    setLoading(true)\n    try {\n      const res = await axios.get(`https://mock-api.drinks.test.siliconrhino.io/events?page=${pageNo}&pageSize=${pageSize}&search=${searchQ}`)\n      const evnts: Event[] = res.data\n      setEvents(evnts)\n      setEventsNo(evnts.length + 1)\n      setLoading(false)\n    }\n    catch (err) {\n      setLoading(false)\n      setError(true)\n    }\n  }\n\n  if (isError) {\n    return (\n      <div>Failed to load data.</div>\n    )\n  }\n  return (\n    <SearchWrapper>\n      <SearchInput\n        minLength={1}\n        debounceTimeout={300}\n        placeholder={'asdf'}\n        //@ts-ignore\n        onChange={event => setSearchQ(event.target.value)}\n      />\n      <div>events: </div>\n      {\n        isLoading ?\n        <div>loading...</div>\n      :\n        allEvents.map((event) => (\n          <EventThumbnail\n            id={event.id}\n            time={event.time}\n            title={event.title}\n            creator={event.creator}\n            guests={event.guests}\n            type={event.type}\n            location={event.location}\n            comments={event.comments}\n          />\n        ))\n      }\n      <PageNumberButtonWrapper>\n        {\n          // lets say i got 8 events\n          // how do I determine how many +5 will fit before we run out of events?\n        }\n        <div>Current page:</div>\n        <SearchParamButton isSelected={pageNo === 1} onClick={() => selectPageNo(1)}>1</SearchParamButton>\n        {eventsNo > pageSize && <SearchParamButton isSelected={pageNo === 2} onClick={() => selectPageNo(2)}>2</SearchParamButton>}\n        {eventsNo > pageSize * 2 && <SearchParamButton isSelected={pageNo === 2} onClick={() => selectPageNo(2)}>2</SearchParamButton>}<SearchParamButton isSelected={pageNo === 3} onClick={() => selectPageNo(3)}>3</SearchParamButton>\n        {eventsNo > pageSize * 4 && <SearchParamButton isSelected={pageNo === 2} onClick={() => selectPageNo(2)}>2</SearchParamButton>}<SearchParamButton isSelected={pageNo === 3} onClick={() => selectPageNo(3)}>3</SearchParamButton>\n        <div>Items per page:</div>\n        <SearchParamButton isSelected={pageSize === 5} onClick={() => setPageSize(5)}>5</SearchParamButton>\n        <SearchParamButton isSelected={pageSize === 15} onClick={() => setPageSize(15)}>15</SearchParamButton>\n        <SearchParamButton isSelected={pageSize === 22} onClick={() => setPageSize(25)}>25</SearchParamButton>\n      </PageNumberButtonWrapper>\n    </SearchWrapper>\n  )\n}\n\nexport default Search"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAOA;AAAA;AAGA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAPA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}